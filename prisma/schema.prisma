// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id          Int         @id @default(autoincrement())
  email       String?     @unique
  name        String?
  googleId    String?     @unique
  avatar      String?
  globalPoints Int        @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relación con pronósticos
  pronostics Pronostic[]
  
  // Relaciones con torneos
  createdTournaments Tournament[] @relation("TournamentCreator")
  participations TournamentParticipant[]
  
  // Relación con puntos por fecha
  matchdayPoints MatchdayPoints[]
}

model Pronostic {
  id         Int      @id @default(autoincrement())
  externalId String  
  userId     Int
  prediction Json     
  processed  Boolean  @default(false) 
  livePoints Int      @default(0) 
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([externalId])
  @@index([processed])
  @@unique([externalId, userId])
}

model SystemConfig {
  key       String   @id 
  value     String   
  updatedAt DateTime @default(now()) @updatedAt
  updatedBy String?  
  
  @@map("system_config")
}

model Tournament {
  id          Int      @id @default(autoincrement())
  name        String   
  description String?  
  inviteCode  String   @unique 
  createdById Int      
  isActive    Boolean  @default(true) 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  creator      User @relation("TournamentCreator", fields: [createdById], references: [id], onDelete: Cascade)
  participants TournamentParticipant[]
  matchdayPoints MatchdayPoints[]
  
  @@index([inviteCode])
}

model TournamentParticipant {
  id           Int      @id @default(autoincrement())
  tournamentId Int      
  userId       Int      
  points       Int      @default(0) 
  joinedAt     DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([tournamentId, userId])
  @@index([tournamentId])
  @@index([userId])
}

model MatchdayPoints {
  id           Int      @id @default(autoincrement())
  tournamentId Int      
  userId       Int      
  matchday     Int      
  points       Int      @default(0) 
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([tournamentId, userId, matchday])
  @@index([tournamentId, matchday]) 
  @@index([tournamentId, userId])   
}

model CronJobExecution {
  id           Int      @id @default(autoincrement())
  jobName      String   
  status       String   
  startedAt    DateTime @default(now())
  completedAt  DateTime?
  executionTimeMs Int?  
  
  previousValue String? 
  newValue     String?  
  recordsAffected Int?  
  
  metadata     Json?    
  errorMessage String?  
  hostInfo     String?  
  
  @@index([jobName, startedAt])
  @@index([status])
  @@index([startedAt])
  
  @@map("cron_job_executions")
}
